version: "3.8"
volumes:
  db_data: {}
  db_data_manager: {}
  pgadmin:
services:
  traefik:
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
    command:
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencryptresolver.acme.email=phillip@golem.network"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=swarm-example"
      - "traefik.http.routers.traefik.middlewares=traefik-compress"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - swarm-example
  api:
    image: phillipjensen/golemgrid-backend:latest
    depends_on:
      - postgres
    volumes:
      - "./uploads:/api-backend/var/media"
    env_file:
      - ./.envs/.django
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.api.rule=Host(`api.staging.golemgrid.com`)
        - traefik.http.routers.api.entrypoints=web
        - traefik.http.services.api.loadbalancer.server.port=8002
        - traefik.http.routers.api.service=api@docker
        - traefik.docker.network=swarm-example
        - traefik.http.routers.api.tls.certresolver=letsencryptresolver
        - traefik.http.routers.api-web-secure.rule=Host(`api.staging.golemgrid.com`)
        - traefik.http.routers.api-web-secure.tls=true
        - traefik.http.routers.api-web-secure.entrypoints=web-secure
        - traefik.http.middlewares.api_compress.compress=true
        - traefik.http.routers.api-web-secure.middlewares=api_compress
        - traefik.http.routers.api.middlewares=api_compress
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  container-manager-api:
    image: phillipjensen/golemgrid-container-manager:latest
    ports:
      - "8003:8003"
    depends_on:
      - postgres
    volumes:
      - "./uploads:/container-backend/var/media"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.envs/.container-manager
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.container-manager-api.rule=Host(`container-api.localhost`)"
        - "traefik.http.routers.container-manager-api.entrypoints=web"
        - "traefik.http.services.container-manager-api.loadbalancer.server.port=8003"
        - "traefik.http.routers.container-manager-api.service=api@docker"
        - "traefik.docker.network=swarm-example"
        - "traefik.http.middlewares.container-manager-api_compress.compress=true"
        - "traefik.http.routers.container-manager-api.middlewares=container-manager-api_compress"
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  redis:
    image: "redis:alpine"
    expose:
      - "6379"
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery:
    image: phillipjensen/golemgrid-backend-celery:latest
    env_file:
      - ./.envs/.django
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 3
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery_beat:
    image: phillipjensen/golemgrid-backend-celery-beat:latest
    command: celery -A core beat -l INFO
    env_file:
      - ./.envs/.django
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery_container_manager:
    image: phillipjensen/golemgrid-container-manager-celery:latest
    volumes:
      - "./uploads:/container-backend/var/media"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.envs/.container-manager
    depends_on:
      - redis
      - postgres
      - api
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery_beat_container_manager:
    image: phillipjensen/golemgrid-container-manager-celery-beat:latest
    command: celery -A core beat -l INFO
    volumes:
      - "./uploads:/container-backend/var/media"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.envs/.container-manager
    depends_on:
      - redis
      - postgres
      - api
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  postgres:
    image: postgres:alpine
    env_file:
      - ./.envs/.db
    volumes:
      - "db_data:/var/lib/postgresql/data"
    networks:
      - swarm-example
  postgres-container-manager:
    image: postgres:alpine
    env_file:
      - ./.envs/.dbmanager
    volumes:
      - "db_data_manager:/var/lib/postgresql/data"
    networks:
      - swarm-example
  frontend:
    image: phillipjensen/golemgrid-frontend:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`staging.golemgrid.com`,`www.staging.golemgrid.com`)
        - traefik.http.services.frontend.loadbalancer.server.port=80
        - traefik.http.routers.frontend.service=frontend@docker
        - traefik.http.routers.frontend.entrypoints=web
        - traefik.docker.network=swarm-example
        - traefik.http.routers.frontend.tls.certresolver=letsencryptresolver
        - traefik.http.routers.frontend-web-secure.rule=Host(`staging.golemgrid.com`,`www.staging.golemgrid.com`)
        - traefik.http.routers.frontend-web-secure.tls=true
        - traefik.http.routers.frontend-web-secure.entrypoints=web-secure
        - traefik.http.middlewares.frontend_compress.compress=true
        - traefik.http.routers.frontend.middlewares=frontend_compress
        - traefik.http.routers.frontend-web-secure.middlewares=frontend_compress
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  nginx-static:
    image: nginx:alpine
    volumes:
      - "./golemgrid-backend/nginx_static.conf:/etc/nginx/conf.d/default.conf"
      - "./uploads:/uploads/media"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.nginx-static.rule=Host(`static.staging.golemgrid.com`,`www.static.staging.golemgrid.com`)
        - traefik.http.services.nginx-static.loadbalancer.server.port=80
        - traefik.http.routers.nginx-static.service=nginx-static@docker
        - traefik.http.routers.nginx-static.entrypoints=web
        - traefik.docker.network=swarm-example
        - traefik.http.routers.nginx-static.tls.certresolver=letsencryptresolver
        - traefik.http.routers.nginx-static-web-secure.rule=Host(`static.staging.golemgrid.com`,`www.static.staging.golemgrid.com`)
        - traefik.http.routers.nginx-static-web-secure.tls=true
        - traefik.http.routers.nginx-static-web-secure.entrypoints=web-secure
        - traefik.http.middlewares.nginx-static_compress.compress=true
        - traefik.http.routers.nginx-static.middlewares=nginx-static_compress
        - traefik.http.routers.nginx-static-web-secure.middlewares=nginx-static_compress
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
networks:
  swarm-example:
    driver: overlay
    attachable: true
