version: "3.8"
volumes:
  db_data: {}
  db_data_manager: {}
  pgadmin:
networks:
  swarm-example:
    driver: overlay
    attachable: true
services:
  traefik:
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=golemgrid-backend_swarm-example"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.middlewares=traefik-compress"
      - "traefik.http.middlewares.traefik-compress.compress=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - swarm-example
    
  backend:
    build:
      context: golemgrid-backend/.
      dockerfile: dockerfiles/Django
    image: golemgrid-backend:latest
    ports:
      - "8002:8002"
    depends_on:
      - postgres
    volumes:
      - "./golemgrid-backend/api-backend:/api-backend/"
      - "./uploads:/api-backend/var/media"
    env_file:
      - ./.envs/.django
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
        - "traefik.http.routers.backend.entrypoints=web"
        - "traefik.http.services.backend.loadbalancer.server.port=8002"
        - "traefik.http.routers.backend.service=backend@docker"
        - "traefik.docker.network=golemgrid-backend_swarm-example"
        - "traefik.http.middlewares.backend_compress.compress=true"
        - "traefik.http.routers.backend.middlewares=backend_compress"
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  container-manager-api:
    build:
      context: golemgrid-container-manager/.
      dockerfile: dockerfiles/Django
    image: golemgrid-container-manager:latest
    ports:
      - "8003:8003"
    depends_on:
      - postgres
    volumes:
      - "./golemgrid-container-manager/container-backend:/container-backend/"
      - "./uploads:/container-backend/var/media"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.envs/.container-manager
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.container-manager-api.rule=Host(`container-api.localhost`)"
        - "traefik.http.routers.container-manager-api.entrypoints=web"
        - "traefik.http.services.container-manager-api.loadbalancer.server.port=8003"
        - "traefik.http.routers.container-manager-api.service=api@docker"
        - "traefik.docker.network=golemgrid-backend_swarm-example"
        - "traefik.http.middlewares.container-manager-api_compress.compress=true"
        - "traefik.http.routers.container-manager-api.middlewares=container-manager-api_compress"
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
    
  redis:
    image: "redis:alpine"
    expose:
      - "6379"
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
    
  celery:
    build:
      context: golemgrid-backend/.
      dockerfile: dockerfiles/Celery
    image: golemgrid-backend-celery:latest
    volumes:
      - "./golemgrid-backend/api-backend:/api-backend/"
    env_file:
      - ./.envs/.django
    depends_on:
      - redis
      - postgres
      - backend
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
    
  celery_beat:
    build:
      context: golemgrid-backend/.
      dockerfile: dockerfiles/Beat
    image: golemgrid-backend-celery-beat:latest
    command: celery -A core beat -l INFO
    volumes:
      - "./golemgrid-backend/api-backend:/api-backend/"
    env_file:
      - ./.envs/.django
    depends_on:
      - redis
      - postgres
      - backend
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
    
  celery_container_manager:
    build:
      context: golemgrid-container-manager/.
      dockerfile: dockerfiles/Celery
    image: golemgrid-container-manager-celery:latest
    volumes:
      - "./golemgrid-container-manager/container-backend:/container-backend/"
      - "./uploads:/container-backend/var/media"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.envs/.container-manager
    depends_on:
      - redis
      - postgres
      - backend
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example

  celery_beat_container_manager:
    build:
      context: golemgrid-container-manager/.
      dockerfile: dockerfiles/Beat
    image: golemgrid-container-manager-celery-beat:latest
    command: celery -A core beat -l INFO
    volumes:
      - "./golemgrid-container-manager/container-backend:/container-backend/"
      - "./uploads:/container-backend/var/media"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.envs/.container-manager
    depends_on:
      - redis
      - postgres
      - backend
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  postgres:
    image: postgres:alpine
    env_file:
      - ./.envs/.db
    volumes:
      - "db_data:/var/lib/postgresql/data"
    networks:
      - swarm-example
  postgres-container-manager:
    image: postgres:alpine
    env_file:
      - ./.envs/.dbmanager
    volumes:
      - "db_data_manager:/var/lib/postgresql/data"
    networks:
      - swarm-example
    
  # pgadmin:
  #   image: dpage/pgadmin4
  #   links:
  #     - postgres
  #   depends_on:
  #     - postgres
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: 123@123.com
  #     PGADMIN_DEFAULT_PASSWORD: 123
  #   volumes:
  #     - pgadmin:/var/lib/pgadmin
  #   ports:
  #     - "5050:80"
  #   networks:
  #     - swarm-example
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: compose/frontend/Dockerfile
  #   image: frontend_golemgrid:latest
  #   volumes:
  #     - "./golemgrid-frontend:/app"
  #     - "/app/node_modules"
  #     - "./nginx.conf:/etc/nginx/conf.d/default.conf"
  #   deploy:
  #     labels:
  #       - traefik.enable=true
  #       - traefik.http.routers.frontend.rule=Host(`frontend.localhost`)
  #       - traefik.http.services.frontend.loadbalancer.server.port=80
  #       - traefik.http.routers.frontend.service=frontend@docker
  #       - traefik.http.routers.frontend.entrypoints=web
  #       - traefik.docker.network=golemgrid-backend_swarm-example
  #     replicas: 1
  #     update_config:
  #       failure_action: rollback
  #       order: start-first
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - swarm-example
  nginx-static:
    image: nginx:alpine
    volumes:
      - "./golemgrid-backend/nginx_static.conf:/etc/nginx/conf.d/default.conf"
      - "./uploads:/uploads/media"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.nginx-static.rule=Host(`static.localhost`)
        - traefik.http.services.nginx-static.loadbalancer.server.port=80
        - traefik.http.routers.nginx-static.service=nginx-static@docker
        - traefik.http.routers.nginx-static.entrypoints=web
        - traefik.docker.network=golemgrid-backend_swarm-example
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
